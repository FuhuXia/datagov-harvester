name: 2 - Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_no:
        description: 'Release Version:'
        required: true

env:
  POETRY_VERSION: "2.0.0"

jobs:
  create-cloudgov-services-staging:
    name: create services (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ./create-cloudgov-services.sh
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  create-cloudgov-services-prod:
    name: create services (prod)
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ./create-cloudgov-services.sh
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-staging:
    name: deploy (staging)
    needs:
      - create-cloudgov-services-staging
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "app/static/package.json"
      - name: Build static assets
        shell: bash
        run: |
            cd app/static
            npm ci
            npm run build
      - name: Set up Python ${{ env.PY_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
          poetry-plugins: "poetry-plugin-export"
      - name: Add requirement.txt
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "Generated requirements.txt:"
          cat requirements.txt
      - name: deploy DHL
        uses: cloud-gov/cg-cli-tools@main
        with:
          # command: cf push datagov-harvest-admin --vars-file vars.development.yml --strategy rolling --no-wait && cf push datagov-harvest-runner --vars-file vars.development.yml --strategy rolling --no-wait
          command: ./bin/check-and-renew datagov-harvest-admin deploy staging
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}


  deploy-prod:
    name: deploy (prod)
    needs:
      - create-cloudgov-services-prod
      - deploy-staging
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "app/static/package.json"
      - name: Build static assets
        shell: bash
        run: |
            cd app/static
            npm ci
            npm run build
      - name: Set up Python ${{ env.PY_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
          poetry-plugins: "poetry-plugin-export"
      - name: Add requirement.txt
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "Generated requirements.txt:"
          cat requirements.txt
      - name: deploy DHL
        uses: cloud-gov/cg-cli-tools@main
        with:
          # command: cf push datagov-harvest-admin --vars-file vars.development.yml --strategy rolling --no-wait && cf push datagov-harvest-runner --vars-file vars.development.yml --strategy rolling --no-wait
          command: ./bin/check-and-renew datagov-harvest-admin deploy prod
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  network-policies:
    name: Add network-policies
    needs:
      - deploy-staging
      - deploy-prod
    runs-on: ubuntu-latest
    environment: ${{ matrix.environ }}
    strategy:
      fail-fast: false
      matrix:
        command: [
          "cf add-network-policy datagov-harvest-runner mdtranslator --protocol tcp --port 8080"
        ]
        environ: ["staging", "prod"]
    steps:
      - name: proxy to web
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ${{ matrix.command }}
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}