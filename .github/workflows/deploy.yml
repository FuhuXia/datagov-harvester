name: 2 - Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_no:
        description: 'Release Version:'
        required: true

# default minimal permissions for every job
permissions:
    contents: read

env:
  POETRY_VERSION: "2.0.0"

jobs:
  create-cloudgov-services-staging:
    name: create services (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: bash create_cloudgov_services.sh
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  create-cloudgov-services-prod:
    name: create services (prod)
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: bash create_cloudgov_services.sh
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-staging:
    name: deploy (staging)
    needs:
      - create-cloudgov-services-staging
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      # issue creation needs more permissions
      contents: read
      id-token: write
      actions: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "app/static/package.json"
      - name: Build static assets
        shell: bash
        run: |
          cd app/static
          npm ci
          npm run build
      - name: Set up Python ${{ env.PY_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
          poetry-plugins: "poetry-plugin-export"
      - name: Add requirements.txt
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "Generated requirements.txt:"
          cat requirements.txt
      - name: Deploy admin app
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push --vars-file vars.staging.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
        with:
          filename: .github/deploy_failure.md
          update_existing: true

  deploy-prod:
    name: deploy (prod)
    needs:
      - create-cloudgov-services-prod
      - deploy-staging
    environment: prod
    runs-on: ubuntu-latest
    permissions:
      # issue creation needs more permissions
      contents: read
      id-token: write
      actions: write
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "app/static/package.json"
      - name: Build static assets
        shell: bash
        run: |
          cd app/static
          npm ci
          npm run build
      - name: Set up Python ${{ env.PY_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
          poetry-plugins: "poetry-plugin-export"
      - name: Add requirements.txt
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          echo "Generated requirements.txt:"
          cat requirements.txt
      - name: Deploy admin app
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push --vars-file vars.prod.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
        with:
          filename: .github/deploy_failure.md
          update_existing: true

  network-policies:
    name: Add network-policies
    needs:
      - deploy-staging
      - deploy-prod
    runs-on: ubuntu-latest
    environment: ${{ matrix.environ }}
    strategy:
      fail-fast: false
      matrix:
        command: [
          "cf add-network-policy datagov-harvest mdtranslator --protocol tcp --port 8080"
        ]
        environ: ["staging", "prod"]
    steps:
      - name: harvester to internal mdtranslator
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ${{ matrix.command }}
          cf_org: gsa-datagov
          cf_space: ${{ matrix.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
